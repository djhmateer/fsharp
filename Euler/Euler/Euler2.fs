//Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
//1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
//By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

module Euler2
// using a top level function as debugging experience better
let Main() =

    // Solution 1 - iterative try..  where: b a currentSum
    let mutable currentSum = 0
    let mutable a = 1
    let mutable b = 0
    let mutable result = 0

    while currentSum <= 4000000 do
        currentSum <- a+b
//        printfn "%A" currentSum
        b <- a
        a <- currentSum

        if (currentSum%2=0) then 
            result <- result + currentSum
    
//    printfn "%A" result
    // 4,613,732

Main()
let Main2() =
    // Solution 2 - 
    let mutable sum = 0
    let mutable a = 1
    let mutable b = 1
    
    while b < 4000000 do
        if (b%2=0) then
            sum <- sum+b
        let h = a+b
        a <- b
        b <- h
    printfn "%A" sum
Main2()

    



// Solution 2 - look for a better way
// recursion....hmm
// how do I make this sequence?????
// 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...


